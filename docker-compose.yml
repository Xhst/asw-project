version: "3.8"

services:

  order-service:
    image: asw-project-23-24/order-service
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: order-service
    deploy:
      replicas: 1
    depends_on:
      - "consul"
      - "order-service-db"

  product-service:
    image: asw-project-23-24/product-service
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: product-service
    deploy:
      replicas: 1
    depends_on:
      - "consul"
      - "product-service-db"

  order-validation-service:
    image: asw-project-23-24/order-validation-service
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: order-validation-service
    deploy:
      replicas: 1
    depends_on:
      - "consul"
      - "order-validation-service-db"

  api-gateway:
    image: asw-project-23-24/api-gateway
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    depends_on:
      - "consul"

  order-service-db:
    container_name: order-service-db
    image: postgres
    environment:
      POSTGRES_USER: ${ORDER_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
    volumes:
      - order-service-db:/data/postgres
    ports:
      - "${ORDER_POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped

  product-service-db:
    container_name: product-service-db
    image: postgres
    environment:
      POSTGRES_USER: ${PRODUCT_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${PRODUCT_POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
    volumes:
      - product-service-db:/data/postgres
    ports:
      - "${PRODUCT_POSTGRES_PORT:-5433}:5432"
    restart: unless-stopped

  order-validation-service-db:
    container_name: order-validation-service-db
    image: postgres
    environment:
      POSTGRES_USER: ${ORDER_VALIDATION_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${ORDER_VALIDATION_POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
    volumes:
      - order-validation-service-db:/data/postgres
    ports:
      - "${ORDER_VALIDATION_POSTGRES_PORT:-5434}:5432"
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: unless-stopped

  consul:
    container_name: consul
    image: docker.io/hashicorp/consul
    ports:
      - "8400:8400"
      - "8500:8500"
      - "8600:8600"

  kafka:
    image: docker.io/bitnami/kafka:3.6
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

volumes:
  product-service-db:
  order-service-db:
  order-validation-service-db:
  pgadmin:
  kafka_data:

